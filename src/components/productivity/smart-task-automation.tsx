'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

import { Checkbox } from '@/components/ui/checkbox'
import { Progress } from '@/components/ui/progress'
import { Calendar, Clock, Sparkles, CheckCircle, AlertCircle, Play, RotateCcw } from 'lucide-react'
import { toast } from '@/hooks/use-toast'

interface AutomatedTask {
  id: string
  title: string
  description: string
  category: string
  priority: 'low' | 'medium' | 'high' | 'critical'
  status: 'pending' | 'in-progress' | 'completed' | 'overdue'
  dueDate: Date
  estimatedHours: number
  actualHours?: number
  assignee?: string
  dependencies: string[]
  autoGenerated: boolean
  aiSuggestions: string[]
  tags: string[]
}

interface TaskCategory {
  name: string
  color: string
  icon: string
  description: string
}

const taskCategories: TaskCategory[] = [
  { name: 'Venue', color: 'bg-blue-100 text-blue-800', icon: '🏛️', description: 'Venue booking and setup' },
  { name: 'Catering', color: 'bg-green-100 text-green-800', icon: '🍽️', description: 'Food and beverage services' },
  { name: 'Entertainment', color: 'bg-purple-100 text-purple-800', icon: '🎵', description: 'Music, performers, activities' },
  { name: 'Decorations', color: 'bg-pink-100 text-pink-800', icon: '🎨', description: 'Visual design and styling' },
  { name: 'Photography', color: 'bg-yellow-100 text-yellow-800', icon: '📸', description: 'Photo and video services' },
  { name: 'Transportation', color: 'bg-gray-100 text-gray-800', icon: '🚗', description: 'Guest and vendor transport' },
  { name: 'Administrative', color: 'bg-indigo-100 text-indigo-800', icon: '📋', description: 'Planning and coordination' }
]

export function SmartTaskAutomation() {
  const [tasks, setTasks] = useState<AutomatedTask[]>([])
  const [eventDetails, setEventDetails] = useState({
    eventType: '',
    eventDate: '',
    guestCount: 0,
    budget: 0,
    location: '',
    theme: ''
  })
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [selectedPriority, setSelectedPriority] = useState('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)

  // Calculate completion percentage
  const completedTasks = tasks.filter(task => task.status === 'completed').length
  const totalTasks = tasks.length
  const completionPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0

  // Filter tasks based on current filters
  const filteredTasks = tasks.filter(task => {
    const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === 'all' || task.category === selectedCategory
    const matchesPriority = selectedPriority === 'all' || task.priority === selectedPriority
    return matchesSearch && matchesCategory && matchesPriority
  })

  // Auto-generate tasks based on event details
  const generateTasks = async () => {
    if (!eventDetails.eventType || !eventDetails.eventDate || !eventDetails.guestCount) {
      toast({
        title: 'Missing Information',
        description: 'Please fill in event type, date, and guest count to generate tasks.',
        variant: 'destructive'
      })
      return
    }

    setIsGenerating(true)
    
    try {
      // Generate tasks immediately without artificial delay
      const newTasks: AutomatedTask[] = generateTasksForEvent(eventDetails)
      setTasks(prev => [...prev, ...newTasks])
      
      toast({
        title: 'Tasks Generated!',
        description: `AI has created ${newTasks.length} tasks for your ${eventDetails.eventType} event.`,
      })
    } catch (error) {
      toast({
        title: 'Task Generation Failed',
        description: 'There was an error generating tasks. Please try again.',
        variant: 'destructive'
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const generateTasksForEvent = (details: typeof eventDetails): AutomatedTask[] => {
    const baseTasks: Omit<AutomatedTask, 'id' | 'dueDate'>[] = []
    const eventDate = new Date(details.eventDate)
    
    // Generate tasks based on event type
    if (details.eventType.toLowerCase().includes('wedding')) {
      baseTasks.push(
        {
          title: 'Book Ceremony Venue',
          description: 'Secure ceremony location and date',
          category: 'Venue',
          priority: 'critical',
          status: 'pending',
          estimatedHours: 4,
          dependencies: [],
          autoGenerated: true,
          aiSuggestions: ['Book 12 months in advance', 'Consider weather backup plan'],
          tags: ['venue', 'ceremony', 'critical']
        },
        {
          title: 'Book Reception Venue',
          description: 'Secure reception location and catering',
          category: 'Venue',
          priority: 'critical',
          status: 'pending',
          estimatedHours: 6,
          dependencies: [],
          autoGenerated: true,
          aiSuggestions: ['Book 12 months in advance', 'Check catering options'],
          tags: ['venue', 'reception', 'critical']
        },
        {
          title: 'Hire Photographer',
          description: 'Book professional photographer and videographer',
          category: 'Photography',
          priority: 'high',
          status: 'pending',
          estimatedHours: 3,
          dependencies: [],
          autoGenerated: true,
          aiSuggestions: ['Book 8 months in advance', 'Review portfolio and style'],
          tags: ['photography', 'vendor', 'high-priority']
        }
      )
    } else if (details.eventType.toLowerCase().includes('conference')) {
      baseTasks.push(
        {
          title: 'Secure Conference Venue',
          description: 'Book conference hall and meeting rooms',
          category: 'Venue',
          priority: 'critical',
          status: 'pending',
          estimatedHours: 8,
          dependencies: [],
          autoGenerated: true,
          aiSuggestions: ['Book 6 months in advance', 'Check AV equipment availability'],
          tags: ['venue', 'conference', 'critical']
        },
        {
          title: 'Book Keynote Speakers',
          description: 'Secure main speakers and presenters',
          category: 'Entertainment',
          priority: 'high',
          status: 'pending',
          estimatedHours: 5,
          dependencies: [],
          autoGenerated: true,
          aiSuggestions: ['Book 4 months in advance', 'Prepare speaker contracts'],
          tags: ['speakers', 'entertainment', 'high-priority']
        }
      )
    }

    // Add common tasks for all events
    baseTasks.push(
      {
        title: 'Send Invitations',
        description: 'Design and send event invitations',
        category: 'Administrative',
        priority: 'medium',
        status: 'pending',
        estimatedHours: 2,
        dependencies: [],
        autoGenerated: true,
        aiSuggestions: ['Send 2-3 months in advance', 'Include RSVP deadline'],
        tags: ['invitations', 'admin', 'medium-priority']
      },
      {
        title: 'Arrange Catering',
        description: 'Book food and beverage services',
        category: 'Catering',
        priority: 'high',
        status: 'pending',
        estimatedHours: 4,
        dependencies: [],
        autoGenerated: true,
        aiSuggestions: ['Book 3 months in advance', 'Consider dietary restrictions'],
        tags: ['catering', 'food', 'high-priority']
      }
    )

    // Calculate due dates based on event date
    return baseTasks.map((task, index) => {
      const daysBeforeEvent = getDaysBeforeEvent(task.title, details.eventType)
      const dueDate = new Date(eventDate)
      dueDate.setDate(dueDate.getDate() - daysBeforeEvent)
      
      return {
        ...task,
        id: `task_${Date.now()}_${index}`,
        dueDate
      }
    })
  }

  const getDaysBeforeEvent = (taskTitle: string, eventType: string): number => {
    if (eventType.toLowerCase().includes('wedding')) {
      if (taskTitle.includes('Venue')) return 365 // 12 months
      if (taskTitle.includes('Photographer')) return 240 // 8 months
      if (taskTitle.includes('Catering')) return 180 // 6 months
      if (taskTitle.includes('Invitations')) return 120 // 4 months
    } else if (eventType.toLowerCase().includes('conference')) {
      if (taskTitle.includes('Venue')) return 180 // 6 months
      if (taskTitle.includes('Speakers')) return 120 // 4 months
      if (taskTitle.includes('Catering')) return 90 // 3 months
      if (taskTitle.includes('Invitations')) return 60 // 2 months
    }
    
    // Default fallback
    return 30
  }

  const updateTaskStatus = (taskId: string, status: AutomatedTask['status']) => {
    setTasks(prev => prev.map(task => 
      task.id === taskId ? { ...task, status } : task
    ))
  }

  const toggleTaskStatus = (taskId: string) => {
    setTasks(prev => prev.map(task => {
      if (task.id === taskId) {
        const newStatus = task.status === 'completed' ? 'pending' : 'completed'
        return { ...task, status: newStatus }
      }
      return task
    }))
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800'
      case 'high': return 'bg-orange-100 text-orange-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'low': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-600" />
      case 'in-progress': return <Play className="h-4 w-4 text-blue-600" />
      case 'overdue': return <AlertCircle className="h-4 w-4 text-red-600" />
      default: return <Clock className="h-4 w-4 text-gray-600" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold text-slate-900 dark:text-white">
          Smart Task Automation
        </h1>
        <p className="text-slate-600 dark:text-slate-400 max-w-2xl mx-auto">
          AI automatically generates and manages tasks for your event. Get intelligent suggestions, automatic scheduling, and smart prioritization.
        </p>
      </div>

      {/* Progress Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-500" />
            Event Progress
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Overall Progress</span>
              <span className="text-sm text-slate-600 dark:text-slate-400">
                {completedTasks} of {totalTasks} tasks completed
              </span>
            </div>
            <Progress value={completionPercentage} className="w-full" />
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-blue-600">{totalTasks}</div>
                <div className="text-sm text-slate-600 dark:text-slate-400">Total Tasks</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">{completedTasks}</div>
                <div className="text-sm text-slate-600 dark:text-slate-400">Completed</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-orange-600">
                  {tasks.filter(t => t.status === 'in-progress').length}
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">In Progress</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-red-600">
                  {tasks.filter(t => t.status === 'overdue').length}
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">Overdue</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Event Details & Task Generation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-blue-500" />
            Generate AI Tasks
          </CardTitle>
          <CardDescription>
            Fill in your event details and AI will automatically generate a comprehensive task list with smart scheduling.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="eventType">Event Type</Label>
              <Select value={eventDetails.eventType} onValueChange={(value) => setEventDetails(prev => ({ ...prev, eventType: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select event type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="wedding">Wedding</SelectItem>
                  <SelectItem value="conference">Conference</SelectItem>
                  <SelectItem value="birthday">Birthday Party</SelectItem>
                  <SelectItem value="corporate">Corporate Event</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="eventDate">Event Date</Label>
              <Input
                id="eventDate"
                type="date"
                value={eventDetails.eventDate}
                onChange={(e) => setEventDetails(prev => ({ ...prev, eventDate: e.target.value }))}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="guestCount">Guest Count</Label>
              <Input
                id="guestCount"
                type="number"
                value={eventDetails.guestCount}
                onChange={(e) => setEventDetails(prev => ({ ...prev, guestCount: parseInt(e.target.value) || 0 }))}
                placeholder="Number of guests"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="budget">Budget ($)</Label>
              <Input
                id="budget"
                type="number"
                value={eventDetails.budget}
                onChange={(e) => setEventDetails(prev => ({ ...prev, budget: parseInt(e.target.value) || 0 }))}
                placeholder="Total budget"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="location">Location</Label>
              <Input
                id="location"
                value={eventDetails.location}
                onChange={(e) => setEventDetails(prev => ({ ...prev, location: e.target.value }))}
                placeholder="Event location"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="theme">Theme</Label>
              <Input
                id="theme"
                value={eventDetails.theme}
                onChange={(e) => setEventDetails(prev => ({ ...prev, theme: e.target.value }))}
                placeholder="Event theme or style"
              />
            </div>
          </div>
          
          <div className="flex gap-3 mt-6">
            <Button 
              onClick={generateTasks} 
              disabled={isGenerating}
              className="flex-1"
            >
              {isGenerating ? (
                <>
                  <RotateCcw className="h-4 w-4 mr-2 animate-spin" />
                  Generating Tasks...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  AI Generate Tasks
                </>
              )}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setTasks([])}
              disabled={tasks.length === 0}
            >
              Clear All Tasks
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Task Filters */}
      {tasks.length > 0 && (
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <Input
              placeholder="Search tasks..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full"
            />
          </div>
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-full sm:w-48">
              <SelectValue placeholder="All categories" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              {taskCategories.map(category => (
                <SelectItem key={category.name} value={category.name}>
                  {category.icon} {category.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select value={selectedPriority} onValueChange={setSelectedPriority}>
            <SelectTrigger className="w-full sm:w-48">
              <SelectValue placeholder="All priorities" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Priorities</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
        </div>
      )}

      {/* Tasks List */}
      {filteredTasks.length > 0 && (
        <div className="space-y-4">
          {filteredTasks.map(task => (
            <Card key={task.id} className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  <Checkbox
                    checked={task.status === 'completed'}
                    onCheckedChange={() => toggleTaskStatus(task.id)}
                    className="mt-1"
                  />
                  <div className="flex-1 space-y-2">
                    <div className="flex items-start justify-between">
                      <div>
                        <h3 className={`font-medium ${task.status === 'completed' ? 'line-through text-slate-500' : ''}`}>
                          {task.title}
                        </h3>
                        <p className="text-sm text-slate-600 dark:text-slate-400">
                          {task.description}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        {getStatusIcon(task.status)}
                        <Badge className={getPriorityColor(task.priority)}>
                          {task.priority}
                        </Badge>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-4 text-sm text-slate-600 dark:text-slate-400">
                      <div className="flex items-center gap-1">
                        <Calendar className="h-4 w-4" />
                        Due: {task.dueDate.toLocaleDateString()}
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="h-4 w-4" />
                        Est: {task.estimatedHours}h
                      </div>
                      <Badge variant="outline" className="text-xs">
                        {task.category}
                      </Badge>
                    </div>

                    {task.aiSuggestions.length > 0 && (
                      <div className="bg-blue-50 dark:bg-blue-950 p-3 rounded-lg">
                        <p className="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">
                          🤖 AI Suggestions:
                        </p>
                        <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                          {task.aiSuggestions.map((suggestion, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-blue-500">•</span>
                              {suggestion}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => updateTaskStatus(task.id, 'in-progress')}
                        disabled={task.status === 'completed'}
                      >
                        Start
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => updateTaskStatus(task.id, 'completed')}
                        disabled={task.status === 'completed'}
                      >
                        Complete
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Empty State */}
      {tasks.length === 0 && (
        <Card className="text-center py-12">
          <CardContent>
            <Sparkles className="h-16 w-16 text-slate-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-2">
              No tasks yet
            </h3>
            <p className="text-slate-600 dark:text-slate-400 mb-4">
              Fill in your event details above and let AI generate a comprehensive task list for you.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
